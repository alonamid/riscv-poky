--- ray-ray-0.2.1/src/local_scheduler/local_scheduler.cc	2017-10-01 19:33:13.000000000 +0000
+++ ray-ray-0.2.1-new/src/local_scheduler/local_scheduler.cc	2017-11-28 04:26:43.433464284 +0000
@@ -5,6 +5,7 @@
 #include <sys/un.h>
 #include <sys/wait.h>
 #include <unistd.h>
+#include <time.h>
 
 #include "common.h"
 #include "common_protocol.h"
@@ -23,6 +24,12 @@
 #include "state/object_table.h"
 #include "state/error_table.h"
 
+#define FIRESIM_BUF_SIZE 100000
+
+uint64_t* firesim_profile_buffer1;
+uint64_t* firesim_profile_buffer_start1;
+char* firesim_profile_taskid_buffer1;
+char* firesim_profile_taskid_buffer_start1;
 /**
  * A helper function for printing available and requested resource information.
  *
@@ -516,6 +523,16 @@
                            TaskSpec *spec,
                            int64_t task_spec_size,
                            LocalSchedulerClient *worker) {
+
+  uint64_t firesim_rdcycle;
+  asm volatile ("rdcycle %0 \n\t" :"=r"(firesim_rdcycle):);
+  *firesim_profile_buffer1 = firesim_rdcycle;
+  firesim_profile_buffer1 = firesim_profile_buffer1 + 1;
+
+  strncpy(firesim_profile_taskid_buffer1, reinterpret_cast<const char *>(TaskSpec_task_id(spec).id), 20);
+  firesim_profile_taskid_buffer1 += 20;
+
+
   /* Acquire the necessary resources for running this task. */
   acquire_resources(
       state, worker, TaskSpec_get_required_resource(spec, ResourceIndex_CPU),
@@ -1093,6 +1110,42 @@
 LocalSchedulerState *g_state = NULL;
 
 void signal_handler(int signal) {
+
+  //==========================================================
+  //===================Alon's Profiling Code===================
+  //==========================================================
+  time_t rawtime;
+  char buffer [255];
+
+  rawtime = time (NULL);
+  sprintf(buffer,"/home/local_scheduler_dispatch_tasks.prof.%d",(uintmax_t)rawtime );
+
+  FILE* prof_f1 = fopen(buffer, "w+");
+  if (prof_f1 == NULL)
+  {
+    printf("Error opening prof_f1 file!\n");
+    exit(1);
+  }
+
+  char* firesim_taskid_printer = firesim_profile_taskid_buffer_start1;
+  for (int i=0; i<FIRESIM_BUF_SIZE-64; i++)
+  {
+    fprintf(prof_f1, "%016lld,",firesim_profile_buffer_start1[i]);
+    if (firesim_profile_buffer_start1[i] == 0) break;
+    for (int j=0; j<20; j++)
+    {
+      fprintf(prof_f1,"%hhx", *firesim_taskid_printer);
+      firesim_taskid_printer++;
+    }
+    fprintf(prof_f1,"\n");
+  }
+
+  fclose(prof_f1);
+  //free(firesim_profile_buffer_start1);
+  //free(firesim_profile_taskid_buffer_start1);
+  //==========================================================
+  //==========================================================
+
   LOG_DEBUG("Signal was %d", signal);
   if (signal == SIGTERM) {
     /* NOTE(swang): This call removes the SIGTERM handler to ensure that we
@@ -1292,6 +1345,10 @@
  * suite has its own declaration of main. */
 #ifndef LOCAL_SCHEDULER_TEST
 int main(int argc, char *argv[]) {
+  firesim_profile_buffer_start1 = (uint64_t*)calloc(FIRESIM_BUF_SIZE,sizeof(uint64_t));
+  firesim_profile_buffer1 = firesim_profile_buffer_start1;
+  firesim_profile_taskid_buffer_start1 = (char*)calloc(FIRESIM_BUF_SIZE,20*sizeof(char));
+  firesim_profile_taskid_buffer1 = firesim_profile_taskid_buffer_start1;
   signal(SIGTERM, signal_handler);
   /* Path of the listening socket of the local scheduler. */
   char *scheduler_socket_name = NULL;
